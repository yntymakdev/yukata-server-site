
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 

 model User {
  id String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
updatedAt DateTime @updatedAt @map("updated_at")
email String @unique
password String?
name String @default("Не указано")
picture String @default("/uploads/no-user-image.png")
store  Store[]
reviews Review[]
orders Order[]
@@map("user")

 }
model Store{
  id String @id @default(cuid())
  createAt DateTime @default(now() )@map("created_at")
  updatedAt  DateTime @updatedAt @map("update_at")
  title String
  description String
  products  Product[]
  categories Category[]
  colors Color[]
  reviews Review[]
  orderitem OrderItem[]
  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id")
  @@map("store")
}


model Product {
  id String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("update_at")
  title String
  description String
  price Int
  images String[]
  reviews Review[]
  orderItems OrderItem[]
   
  color Color? @relation(fields: [colorId], references: [id])
  colorId String  @map("color_id")
  store Store? @relation(fields: [storeId], references: [id]) 
  storeId  String? @map("store_id")
  category Category? @relation(fields: [categoryId], references: [id]) 
  categoryId  String? @map("category_id")
  
  @@map("product")
}


model Category {
  id String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
updatedAt DateTime @updatedAt @map("updated_at")
title String
description String

products Product[]  
store Store? @relation(fields: [storeId], references: [id]) 
  storeId  String? @map("store_id")


@@map("category") 

} 


model Color{
  id String @id @default(cuid())
  createdAt DateTime @default(now())@map("created_at")
updatedAt DateTime @updatedAt @map("updated_at")
 store Store? @relation(fields: [storeId], references: [id])
 storeId String? @map("store_id")
products Product[]
 name String
 value String
 @@map("color")
 
}


model Review{
id String @id @default(cuid())
createdAt DateTime @default(now()) @map("created_at")
updatedAt DateTime @updatedAt @map("updated_at")
rating Int
text String
user User @relation(fields: [userId], references: [id])
userId String @map("user_id")
product Product @relation(fields: [productId], references: [id])
productId String @map("product_id")
store Store @relation(fields: [storeId], references: [id])
storeId String @map("store_id")

@@map("review")

}
model Order{
id String  @id @default(cuid())
createdAt DateTime @default(now()) @map("created_at")
updatedAt DateTime @updatedAt @map("updated_at")
status EnumOrderStatus @default(PENDING)

items OrderItem[]
total Int
user User @relation(fields: [userId], references: [id])
userId String @map("user_id")
@@map("order")

}
model OrderItem{
id String @id @default(cuid())
createdAt DateTime @default(now()) @map("created_at")
updatedAt DateTime @updatedAt @map("updatedAt")
orders Order @relation(fields: [orderId], references: [id])
orderId String @map("order_id")
product Product @relation(fields: [productId], references: [id])
productId String @map("product_id")
store Store @relation(fields: [storeId], references: [id])
storeId String @map("storeId")
price Int
quntity Int
@@map("order_item")
}
enum EnumOrderStatus {
  PENDING 
  SUCCESFULL
}